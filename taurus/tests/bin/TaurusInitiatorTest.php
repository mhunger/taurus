<?php
/**
 * Created by PhpStorm.
 * User: michael_hunger
 * Date: 20/07/17
 * Time: 09:06
 */

use taurus\tests\AbstractTaurusTest;
use bin\Taurus;
use bin\tpl\TaurusInitiator;

class TaurusInitiatorTest extends AbstractTaurusTest
{

    const FIXTURE_PATH = __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'fixtures';
    /**
     * @var TaurusInitiator
     */
    private $initiator;

    private $path = __DIR__ . '/../../../';

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->initiator = new TaurusInitiator();
        Taurus::$_noisy = false;
    }

    public function testInitApp()
    {
        $appName = 'testApp';
        $appPath = $this->path . DIRECTORY_SEPARATOR . $appName . DIRECTORY_SEPARATOR;
        $fixturePath = __DIR__ . DIRECTORY_SEPARATOR . 'fixtures';

        $this->initiator->initApp($appName);
        $this->assertFileExists($appPath , 'File not created: [testApp]');

        $this->checkFiles($appPath, $fixturePath);

        $this->deleteCreatedFilesAndDirectories($this->path . '/' . $appName);

    }

    /**
     * @param string $appPath
     * @param string $fixturePath
     */
    private function checkFiles(string $appPath, string $fixturePath)
    {
        $filesToCheck = [
            'config' . DIRECTORY_SEPARATOR . 'TestAppContainerConfig',
            'config' . DIRECTORY_SEPARATOR . 'TestAppRouteConfig',
            'config' . DIRECTORY_SEPARATOR . 'TestAppTestContainerConfig',
            'Application'
        ];

        foreach($filesToCheck as $file) {
            $this->assertEquals(
                file_get_contents($appPath . $file . '.php'),
                file_get_contents(self::FIXTURE_PATH . DIRECTORY_SEPARATOR . $file . '.php'),
                'Contents of file [' . $file . '] does not match expected result'
            );

        }

        /** check config file */
        $this->assertEquals(
            file_get_contents($appPath . 'config' . DIRECTORY_SEPARATOR . 'testapp.config.yaml'),
            file_get_contents(self::FIXTURE_PATH . DIRECTORY_SEPARATOR . 'testapp.config.yaml'),
            'Config template was not correctly copied'
        );
    }

    /**
     * @param string $dir Directory to Remove
     */
    private function deleteCreatedFilesAndDirectories(string $dir)
    {
        $it = new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS);
        $files = new RecursiveIteratorIterator($it,
            RecursiveIteratorIterator::CHILD_FIRST);

        foreach($files as $file) {
            if ($file->isDir()){
                $this->deleteCreatedFilesAndDirectories($file->getRealPath());
            } else {
                unlink($file->getRealPath());
            }
        }
        rmdir($dir);
    }
}
