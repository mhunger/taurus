<?php
/**
 * Created by PhpStorm.
 * User: michaelhunger
 * Date: 24/02/17
 * Time: 20:32
 */

namespace taurus\tests\db;


use fitnessmanager\exercise\Exercise;
use fitnessmanager\workout\Workout;
use fitnessmanager\workout\WorkoutLocation;
use taurus\framework\config\TaurusContainerConfig;
use taurus\framework\Container;
use taurus\framework\db\EntityBuilder;
use taurus\tests\AbstractTaurusTest;

class EntityBuilderTest extends AbstractTaurusTest
{
    /** @var EntityBuilder */
    private $entityBuilder;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->entityBuilder = Container::getInstance()->getService(TaurusContainerConfig::SERVICE_ENTITY_BUILDER);
    }

    public function testConvertOne()
    {
        $expectedEntity = (new Exercise())->setId(1)->setName('testName')->setDifficulty('medium')->setVariantName('Chinup');
        $actualEntity = $this->entityBuilder->convertOne(
            [
                'exercise_id' => 1,
                'name' => 'testName',
                'difficulty' => 'medium',
                'variant_name' => 'Chinup',

            ],
            Exercise::class
        );

        $this->assertEquals(
            $expectedEntity,
            $actualEntity,
            'Could not convert entity'
        );
    }

    public function testConvertOneWithRelationShip()
    {
        $expectedEntity = (new Workout())->setId(1)->setDate('2012-01-01 12:00:00')->setWorkoutLocation(
            (new WorkoutLocation())->setId(1)->setName('TUM Sportzentrum')
        );

        $actualEntity = $this->entityBuilder->convertOne(
            [
                'id' => 1,
                'date' => '2012-01-01 12:00:00',
                'workout_location_id' => 1
            ],
            Workout::class,
            [
                'workout_location_id' => (new WorkoutLocation())->setId(1)->setName('TUM Sportzentrum')
            ]
        );

        $this->assertEquals(
            $expectedEntity,
            $actualEntity,
            'Did not build entity with relationship correctly'
        );
    }

    public function testConvertMany()
    {
        $expectedEntities = [
            (new Exercise())->setId(1)->setName('testName')->setDifficulty('medium')->setVariantName('Chinup'),
            (new Exercise())->setId(2)->setName('testName2')->setDifficulty('hard')->setVariantName('Push-Up')
        ];

        $actualEntities = $this->entityBuilder->convertMany(
            [
                [
                    'exercise_id' => 1,
                    'name' => 'testName',
                    'difficulty' => 'medium',
                    'variant_name' => 'Chinup',

                ],
                [
                    'exercise_id' => 2,
                    'name' => 'testName2',
                    'difficulty' => 'hard',
                    'variant_name' => 'Push-Up',

                ]
            ],
            Exercise::class
        );

        $this->assertEquals(
            $expectedEntities,
            $actualEntities,
            'Could not convert many results to entities'
        );
    }
}